name: build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:  # 允许手动触发

env:
  IS_STABLE: ${{ !contains(github.ref, '-') }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - platform: android
            os: ubuntu-latest
          - platform: windows
            os: windows-latest
            arch: amd64
          - platform: linux
            os: ubuntu-22.04
            arch: amd64
          - platform: macos
            os: macos-13
            arch: amd64
          - platform: macos
            os: macos-latest
            arch: arm64
          - platform: windows
            os: windows-11-arm
            arch: arm64
          - platform: linux
            os: ubuntu-24.04-arm
            arch: arm64

    steps:
      - name: Setup rust
        if: startsWith(matrix.os, 'windows-11-arm')
        run: |
          Invoke-WebRequest -Uri "https://win.rustup.rs/aarch64" -OutFile rustup-init.exe
          .\rustup-init.exe -y --default-toolchain stable
          $cargoPath = "$env:USERPROFILE\.cargo\bin"
          Add-Content $env:GITHUB_PATH $cargoPath

      # 🔥 新增：拉取私有仓库代码
      - name: Clone private repository
        env:
          PRIVATE_REPO_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        shell: bash
        run: |
          git clone "https://x-access-token:${PRIVATE_REPO_TOKEN}@github.com/PotatoOfficialTeam/flclash.git" private-source
          
      - name: Checkout public repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          path: public-repo

      # 🔥 新增：合并私有代码到构建目录
      - name: Prepare build environment
        shell: bash
        run: |
          # 备份私有源码以防需要提取SDK
          cp -r private-source private-source-backup
          # 将私有仓库的源码复制到构建目录
          cp -r private-source/* ./
          # 如果需要保留公共仓库的某些文件（如CI配置），可以选择性复制
          rm -rf .github
          cp -r public-repo/.github ./
          # 下载并设置 flutter_xboard_sdk
          echo "🔧 Setting up flutter_xboard_sdk..."
          if [ ! -f "lib/sdk/flutter_xboard_sdk/pubspec.yaml" ]; then
            echo "❌ flutter_xboard_sdk not found, downloading..."
            # 创建目录结构
            mkdir -p lib/sdk
            
            # 尝试多种方式下载SDK
            SDK_DOWNLOADED=false
            
            # 方式1: 尝试从公开的SDK仓库下载（无需token）
            echo "🔄 尝试从公开仓库下载..."
            if git clone https://github.com/PotatoOfficialTeam/flutter_xboard_sdk.git temp-sdk; then
              echo "✅ 成功从公开仓库下载"
              # 确保目标目录不存在，然后移动
              rm -rf lib/sdk/flutter_xboard_sdk
              mv temp-sdk lib/sdk/flutter_xboard_sdk
              SDK_DOWNLOADED=true
            else
              echo "⚠️ 公开仓库下载失败"
            fi
            
            # 方式2: 如果公开仓库失败，尝试使用token下载
            if [ "$SDK_DOWNLOADED" = false ]; then
              echo "🔄 尝试使用token从仓库下载..."
              if git clone "https://x-access-token:${PRIVATE_REPO_TOKEN}@github.com/PotatoOfficialTeam/flutter_xboard_sdk.git" temp-sdk; then
                echo "✅ 使用token下载成功"
                rm -rf lib/sdk/flutter_xboard_sdk
                mv temp-sdk lib/sdk/flutter_xboard_sdk
                SDK_DOWNLOADED=true
              else
                echo "⚠️ Token下载也失败"
              fi
            fi
            
            # 方式3: 从备份的私有源码中复制（如果存在）
            if [ "$SDK_DOWNLOADED" = false ] && [ -d "private-source-backup/lib/sdk/flutter_xboard_sdk" ]; then
              echo "🔄 从私有源码备份复制..."
              cp -r "private-source-backup/lib/sdk/flutter_xboard_sdk" lib/sdk/
              SDK_DOWNLOADED=true
              echo "✅ 从备份复制成功"
            fi
            
            # 方式4: 最后备用方案 - 重新克隆完整的flclash仓库获取SDK
            if [ "$SDK_DOWNLOADED" = false ]; then
              echo "🔄 最后尝试：重新下载完整仓库..."
              if git clone --depth 1 "https://x-access-token:${PRIVATE_REPO_TOKEN}@github.com/PotatoOfficialTeam/flclash.git" temp-full-repo; then
                if [ -d "temp-full-repo/lib/sdk/flutter_xboard_sdk" ]; then
                  cp -r "temp-full-repo/lib/sdk/flutter_xboard_sdk" lib/sdk/
                  rm -rf temp-full-repo
                  SDK_DOWNLOADED=true
                  echo "✅ 从完整仓库提取成功"
                else
                  echo "❌ 完整仓库中也未找到SDK"
                fi
              else
                echo "❌ 无法下载完整仓库"
              fi
            fi
            
            if [ "$SDK_DOWNLOADED" = false ]; then
              echo "❌ 所有下载方式都失败了"
              exit 1
            fi
          fi
          
          # 验证SDK是否正确设置
          echo "🔍 验证SDK设置..."
          if [ -f "lib/sdk/flutter_xboard_sdk/pubspec.yaml" ]; then
            echo "✅ flutter_xboard_sdk successfully set up"
            ls -la lib/sdk/flutter_xboard_sdk/
          else
            echo "❌ flutter_xboard_sdk setup failed"
            echo "调试信息:"
            echo "当前目录结构:"
            ls -la lib/sdk/ || echo "lib/sdk 目录不存在"
            if [ -d "lib/sdk/flutter_xboard_sdk" ]; then
              echo "flutter_xboard_sdk 目录存在，内容:"
              ls -la lib/sdk/flutter_xboard_sdk/
            else
              echo "flutter_xboard_sdk 目录不存在"
            fi
            echo "寻找所有可能的 pubspec.yaml:"
            find . -name "pubspec.yaml" -type f | grep -E "(xboard|sdk)" || echo "未找到相关的 pubspec.yaml"
            exit 1
          fi
          # 初始化和更新Git子模块（特别是Clash.Meta）
          echo "🔧 初始化Git子模块..."
          if [ -f ".gitmodules" ]; then
            echo "发现 .gitmodules 文件"
            cat .gitmodules
            # 初始化子模块
            git submodule init
            # 更新子模块（使用token访问私有仓库）
            git config --global url."https://x-access-token:${PRIVATE_REPO_TOKEN}@github.com/".insteadOf "https://github.com/"
            git submodule update --recursive --depth 1
            echo "✅ 子模块初始化完成"
          else
            echo "⚠️ 未找到 .gitmodules 文件"
            # 手动检查和下载核心依赖
            if [ ! -f "core/Clash.Meta/go.mod" ]; then
              echo "🔧 手动下载 Clash.Meta 核心..."
              # 先删除可能存在的空目录
              rm -rf core/Clash.Meta
              mkdir -p core
              # 尝试从公开仓库下载
              if git clone --depth 1 https://github.com/MetaCubeX/mihomo.git core/Clash.Meta; then
                echo "✅ 成功从公开仓库下载 Clash.Meta"
              elif git clone --depth 1 "https://x-access-token:${PRIVATE_REPO_TOKEN}@github.com/MetaCubeX/mihomo.git" core/Clash.Meta; then
                echo "✅ 使用token下载 Clash.Meta 成功"
              else
                echo "❌ 无法下载 Clash.Meta 核心"
                exit 1
              fi
            else
              echo "✅ Clash.Meta 核心已存在"
            fi
          fi
          
          # 验证核心文件
          if [ -f "core/Clash.Meta/go.mod" ]; then
            echo "✅ Clash.Meta 核心文件验证成功"
          else
            echo "❌ Clash.Meta 核心文件缺失"
            echo "当前 core 目录结构:"
            ls -la core/ || echo "core 目录不存在"
            if [ -d "core/Clash.Meta" ]; then
              echo "Clash.Meta 目录内容:"
              ls -la core/Clash.Meta/
            fi
            exit 1
          fi
          
          # 清理敏感信息
          rm -rf private-source private-source-backup public-repo temp-sdk temp-full-repo 2>/dev/null || true
          
      - name: Debug directory structure
        shell: bash
        run: |
          echo "=== Current directory structure ==="
          find . -name "pubspec.yaml" -type f | head -10
          echo "=== lib/sdk structure ==="
          ls -la lib/sdk/ || echo "lib/sdk does not exist"
          echo "=== lib/xboard structure ==="
          ls -la lib/xboard/ || echo "lib/xboard does not exist"
          
      - name: Setup Android Signing
        if: startsWith(matrix.platform,'android')
        run: |
          echo "${{ secrets.KEYSTORE }}" | base64 --decode > android/app/keystore.jks
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/local.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/local.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/local.properties

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.0'
          cache-dependency-path: |
            core/go.sum

      - name: Setup Flutter Master
        if: startsWith(matrix.os, 'windows-11-arm') || startsWith(matrix.os, 'ubuntu-24.04-arm')
        uses: subosito/flutter-action@v2
        with:
          channel: 'master'
          cache: true
      - name: Setup Flutter
        if: ${{ !(startsWith(matrix.os, 'windows-11-arm') || startsWith(matrix.os, 'ubuntu-24.04-arm')) }}
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Get Flutter Dependency
        run: flutter pub get

      - name: Setup
        run: dart setup.dart ${{ matrix.platform }} ${{ matrix.arch && format('--arch {0}', matrix.arch) }} ${{ env.IS_STABLE == 'true' && '--env stable' || '' }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.platform }}${{ matrix.arch && format('-{0}', matrix.arch) }}
          path: ./dist
          overwrite: true

  changelog:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        if: ${{ env.IS_STABLE == 'true' }}
        with:
          fetch-depth: 0
          ref: refs/heads/main
      - name: Generate
        if: ${{ env.IS_STABLE == 'true' }}
        run: |
          tags=($(git tag --merged $(git rev-parse HEAD) --sort=-creatordate))
          preTag=$(grep -oP '^## \K.*' CHANGELOG.md | head -n 1)
          currentTag=""
          for ((i = 0; i <= ${#tags[@]}; i++)); do
            if (( i < ${#tags[@]} )); then
              tag=${tags[$i]}
            else
              tag=""
            fi
            if [ -n "$currentTag" ]; then
              if [ "$(echo -e "$currentTag\n$preTag" | sort -V | head -n 1)" == "$currentTag" ]; then
                break
              fi
            fi
            if [ -n "$currentTag" ]; then
              echo "## $currentTag" >> NEW_CHANGELOG.md
              echo "" >> NEW_CHANGELOG.md
              if [ -n "$tag" ]; then
                git log --pretty=format:"%B" "$tag..$currentTag" | awk 'NF {print "- " $0} !NF {print ""}' >> NEW_CHANGELOG.md
              else
                git log --pretty=format:"%B" "$currentTag" | awk 'NF {print "- " $0} !NF {print ""}' >> NEW_CHANGELOG.md
              fi
              echo "" >> NEW_CHANGELOG.md
            fi
            currentTag=$tag
          done
          cat CHANGELOG.md >> NEW_CHANGELOG.md
          cat NEW_CHANGELOG.md > CHANGELOG.md

      - name: Commit
        if: ${{ env.IS_STABLE == 'true' }}
        run: |
          git add CHANGELOG.md
          if ! git diff --cached --quiet; then
            echo "Commit pushing"
            git config --local user.email "chen08209@gmail.com"
            git config --local user.name "chen08209"
            git commit -m "Update changelog"
            git push
            if [ $? -eq 0 ]; then
              echo "Push succeeded"
            else
              echo "Push failed"
              exit 1
            fi
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload:
    permissions: write-all
    needs: [ build ]
    runs-on: ubuntu-latest
    services:
      telegram-bot-api:
        image: aiogram/telegram-bot-api:latest
        env:
          TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
        ports:
          - 8081:8081
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download
        uses: actions/download-artifact@v4
        with:
          path: ./dist/
          pattern: artifact-*
          merge-multiple: true

      - name: Generate release.md
        run: |
          tags=($(git tag --merged $(git rev-parse HEAD) --sort=-creatordate))
          preTag=$(curl --silent "https://api.github.com/repos/chen08209/FlClash/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")' || echo "")
          currentTag=""
          for ((i = 0; i <= ${#tags[@]}; i++)); do
            if (( i < ${#tags[@]} )); then
              tag=${tags[$i]}
            else
              tag=""
            fi
            if [ -n "$currentTag" ]; then
              if [ "$(echo -e "$currentTag\n$preTag" | sort -V | head -n 1)" == "$currentTag" ]; then
                break
              fi
            fi
            if [ -n "$currentTag" ]; then
              if [ -n "$tag" ]; then
                git log --pretty=format:"%B" "$tag..$currentTag" | awk 'NF {print "- " $0} !NF {print ""}' >> release.md
              else
                git log --pretty=format:"%B" "$currentTag" | awk 'NF {print "- " $0} !NF {print ""}' >> release.md
              fi
              echo "" >> release.md
            fi
            currentTag=$tag
          done

      - name: Push to telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TAG: ${{ github.ref_name }}
          RUN_ID: ${{ github.run_id }}
        run: |
          python -m pip install --upgrade pip
          pip install requests
          python release_telegram.py

      - name: Patch release.md
        run: |
          version=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          sed "s|VERSION|$version|g" ./.github/release_template.md >> release.md

      - name: Generate sha256
        if: env.IS_STABLE == 'true'
        run: |
          cd ./dist
          for file in $(find . -type f -not -name "*.sha256"); do
            sha256sum "$file" > "${file}.sha256"
          done  

      - name: Release
        if: ${{ env.IS_STABLE == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          files: ./dist/*
          body_path: './release.md'

      - name: Create Fdroid Source Dir
        if: ${{ env.IS_STABLE == 'true' }}
        run: |
          mkdir -p ./tmp
          cp ./dist/*android-arm64-v8a* ./tmp/ || true
          echo "Files copied successfully"

      - name: Push to fdroid repo
        if: ${{ env.IS_STABLE == 'true' }}
        uses: cpina/github-action-push-to-another-repository@v1.7.2
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
        with:
          source-directory: ./tmp/
          destination-github-username: chen08209
          destination-repository-name: FlClash-fdroid-repo
          user-name: 'github-actions[bot]'
          user-email: 'github-actions[bot]@users.noreply.github.com'
          target-branch: main
          commit-message: Update from ${{ github.ref_name }}
          target-directory: /tmp/